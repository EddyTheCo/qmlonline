import QtQuick 2.0
import nodeConection
import account
import outMonitor
import MyDesigns
import outConsumer
import outCreator
import blockSender
/*
*   Mint NFTS
*
*/
Item
{
    anchors.fill:parent
    Component.onCompleted:
    {
        Node_Conection.nodeaddr=""
        Node_Conection.jwt=""
        Account.seed="9fe7bb0ec7cae8824ebb8c232338cb880a393b21bb4cbd7f35ab85d06ed84586"
    }

    MyButton {
        id:butt
        anchors.left:parent.left;
        anchors.verticalCenter:parent.verticalCenter
        enabled:Node_Conection.state
        width: 75
        height:50
        text:"start"
        onClicked:
        {
            monitor.setRestCalls(2);
            var filter="address="+Account.addr_bech32([0,0,0],Node_Conection.info().protocol.bech32Hrp)+"&hasNativeTokens=false";
            monitor.getRestNftOuts(filter);
            monitor.getRestBasicOuts(filter);
        }
    }
    MyTextArea
    {
        id:textarea
        width:(parent.width-butt.width)*0.97
        height:parent.height*0.8
        anchors.left:butt.right
        anchors.verticalCenter:parent.verticalCenter
    }
    OutMonitor
    {
        id:monitor
        onFinished:function (vec,outs) {
            outconsumer.consume(vec,Account.path_json([0,0,0]));
        }
    }
    OutConsumer {
        id:outconsumer
        onFinish:function (data,bundle) {
            console.log("data.amount",data.amount);
            outcreator.setTyp(OutCreator.NFT_typ);
            outcreator.setAddressUnlockCondition(Account.path_json([0,0,0]));
            var imutable_metadata= {
                "standard": "IRC27",
                "version":"v2.0",
                "type":"image/png",
                "name":"profile picture",
                "uri":"https://www.example.org1"
            };
            outcreator.setImmutableMetadata(imutable_metadata);
            outcreator.setIssuer(Account.path_json([0,0,0]));
            blocksender.addOutput(outcreator.getOutput());
            outcreator.reset();
            outcreator.setTyp(OutCreator.NFT_typ);
            var imutable_metadata2= {
                "standard": "IRC27",
                "version":"v2.0",
                "type":"image/png",
                "name":"profile picture",
                "uri":"https://www.example.org2"
            };
            outcreator.setImmutableMetadata(imutable_metadata2);
            outcreator.setAddressUnlockCondition(Account.path_json([0,0,0]));
            blocksender.addOutput(outcreator.getOutput());

            outcreator.reset();
            outcreator.setTyp(OutCreator.NFT_typ);
            outcreator.setAddressUnlockCondition(Account.path_json([0,0,0]));
            /*
            * Without this the previous nfts will be burned
            *
            *if (data.nft.length) {
                for (let i = 0; i < data.nft.length; i++) {
                    outcreator.fromChain(i,bundle);
                    outcreator.init();
                    blocksender.addOutput(outcreator.getOutput());
                }
                
            }*/

            blocksender.addBundle(bundle);
            blocksender.send();
        }
    }
    OutCreator
    {
        id:outcreator

    }
    BlockSender
    {
        id:blocksender
        onNotEnoughFunds: function (amount) {
            console.log("not enought ", amount);
        }
    }

}
